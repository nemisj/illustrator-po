(function () {        var doc = app.activeDocument;        function parsPoContent(content) {        var json = {        };            var key = null;        for (var i = 0; i < content.length; i++) {            var line = content[i];            if (/msgid\s*"/.test(line)) {                               // getting conten                var start = line.search(/msgid\s*"/);                var end = line.search(/"[^"]*$/);                var msgid = line.substring(start, end);                                 // don't have to replace and, since it's cutted by substr                msgid = msgid.replace(/msgid\s*"/,'');                    if (json[msgid]) {                        alert('Key is already defined. Quitting...');                        throw new Error('REDEFINED');                    } else {                        json[msgid] = '';                        key = msgid;                    }            } else if (/msgstr\s*"/.test(line)) {                                    // getting conten                    var start = line.search(/msgstr\s*"/);                    var end = line.search(/"[^"]*$/);                    var msgstr = line.substring(start, end);                                         // don't have to replace and, since it's cutted by substr                    msgstr = msgstr.replace(/msgstr\s*"/,'');                                    if (key!==null) {                    json[key] = msgstr;                    key = null;                 } else {                    alert('Format is broken...Quit');                    throw new Error('Broken format');                 }                                }        }            return json;    };    // getting the po file    var poFile = File.openDialog ("Select .po file");    if (poFile) {        // checking that this is file and not directory?        poFile.open('r:');        var content = [];        var length = poFile.length;        for (var i = 0; i < length; i = poFile.tell()) {            var str = poFile.readln();             // search if this thing starts with msgid             content.push(str);        }          var json = parsPoContent(content);        var layerName = poFile.name;         var layers= doc.layers;                try {            var layer = layers.getByName(layerName);        } catch (e) {        }    var textRefs = doc.activeLayer.textFrames;        if (layer) {                alert('Layer with name ' + poFile.name + 'already exist. Quit');                throw new Error('Duplicate layer');        } else {                //alert('Will create layer' + poFile.name);                layer = layers.add();                layer.name = layerName;            }                for (var i = 0; i < textRefs.length; i++) {            var textItem = textRefs[i];            var textContent = textItem.contents;                     textContent = textContent.replace(/\n/, ' ');            textContent = textContent.replace(/\r/, ' ');            if (json[textContent]) {                $.writeln('Found translated version:' +json[textContent]);                //var newTextFrame = layer.textFrames.add();                //newTextFrame.contents = textContent;                var newItem = textItem.duplicate(layer, ElementPlacement.PLACEATEND);                    newItem.contents = json[textContent];            } else {                alert('Text ' + textContent + ' is not found in translation');            }        }                 $.bp();    }    // getting current layer with all the textFrames})();